{
  "address": "0xD3a0C8205Ea985f6186fc6cCe9525B7a5A745FfF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sOHM",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addresses",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "balanceFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "balanceTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fromBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sOHM",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sOHM",
      "outputs": [
        {
          "internalType": "contract IsOHM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addresses",
          "type": "address"
        }
      ],
      "name": "subMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf892f89f2344cc3f3e392e00f376f75d0305998b90610d8744372ba5896ecac5",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0xD3a0C8205Ea985f6186fc6cCe9525B7a5A745FfF",
    "transactionIndex": 3,
    "gasUsed": "1610537",
    "logsBloom": "0x
    "blockHash": "0xd7a7f922dc900f7eb154dc536dd61239461bfa6532257368a80bff4691f49ab3",
    "transactionHash": "0xf892f89f2344cc3f3e392e00f376f75d0305998b90610d8744372ba5896ecac5",
    "logs": [],
    "blockNumber": 30533941,
    "cumulativeGasUsed": "2155687",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbD70929221D98c7dA25820A632EEf678f50e3810",
    "0x53b53Af5753bd3600A5092aF25E03F0d8DC5fd19"
  ],
  "solcInputHash": "c11c2ee64510471a09c1ebad4051e611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sOHM\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"balanceFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"balanceTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sOHM\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"contract IsOHM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"}],\"name\":\"subMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceFrom(uint256)\":{\"params\":{\"_amount\":\"uintbalanceTo\"},\"returns\":{\"_0\":\"uint\"}},\"balanceTo(uint256)\":{\"params\":{\"_amount\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_from\":\"address\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"migrate(address,address)\":{\"params\":{\"_sOHM\":\"address\",\"_staking\":\"address\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceFrom(uint256)\":{\"notice\":\"converts gOHM amount to OHM\"},\"balanceTo(uint256)\":{\"notice\":\"converts OHM amount to gOHM\"},\"burn(address,uint256)\":{\"notice\":\"burn gOHM\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"index()\":{\"notice\":\"pull index from sOHM token\"},\"migrate(address,address)\":{\"notice\":\"transfer mint rights from migrator to stakingcan only be done once, at the time of contract migration\"},\"mint(address,uint256)\":{\"notice\":\"mint gOHM\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/gOHM.sol\":\"gOHM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/gOHM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\n\\nimport \\\"../interfaces/IsOHM.sol\\\";\\nimport \\\"../interfaces/IgOHM.sol\\\";\\nimport \\\"../types/ERC20.sol\\\";\\n\\ncontract gOHM is IgOHM, ERC20 {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyApproved() {\\n        require(minter[msg.sender], \\\"Only approved\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint256 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IsOHM public sOHM;\\n    address public approved; // minter\\n    bool public migrated;\\n\\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\\n    mapping(address => uint256) public numCheckpoints;\\n    mapping(address => address) public delegates;\\n    mapping(address => bool) public minter;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _migrator, address _sOHM) ERC20(\\\"Governance OHM\\\", \\\"gOHM\\\", 18) {\\n        require(_migrator != address(0), \\\"Zero address: Migrator\\\");\\n        approved = _migrator;\\n        require(_sOHM != address(0), \\\"Zero address: sOHM\\\");\\n        sOHM = IsOHM(_sOHM);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice transfer mint rights from migrator to staking\\n     * @notice can only be done once, at the time of contract migration\\n     * @param _staking address\\n     * @param _sOHM address\\n     */\\n    function migrate(address _staking, address _sOHM) external override onlyApproved {\\n        require(!migrated, \\\"Migrated\\\");\\n        migrated = true;\\n\\n        require(_staking != approved, \\\"Invalid argument\\\");\\n        require(_staking != address(0), \\\"Zero address found\\\");\\n        approved = _staking;\\n\\n        require(_sOHM != address(0), \\\"Zero address found\\\");\\n        sOHM = IsOHM(_sOHM);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n        @notice mint gOHM\\n        @param _to address\\n        @param _amount uint\\n     */\\n    function mint(address _to, uint256 _amount) external override onlyApproved {\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n        @notice burn gOHM\\n        @param _from address\\n        @param _amount uint\\n     */\\n    function burn(address _from, uint256 _amount) external override onlyApproved {\\n        _burn(_from, _amount);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice pull index from sOHM token\\n     */\\n    function index() public view override returns (uint256) {\\n        return sOHM.index();\\n    }\\n\\n    /**\\n        @notice converts gOHM amount to OHM\\n        @param _amount uintbalanceTo\\n        @return uint\\n     */\\n    function balanceFrom(uint256 _amount) public view override returns (uint256) {\\n        return _amount.mul(index()).div(10**decimals());\\n    }\\n\\n    /**\\n        @notice converts OHM amount to gOHM\\n        @param _amount uint\\n        @return uint\\n     */\\n    function balanceTo(uint256 _amount) public view override returns (uint256) {\\n        return _amount.mul(10**decimals()).div(index());\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint256 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\\n        require(blockNumber < block.number, \\\"gOHM::getPriorVotes: not yet determined\\\");\\n\\n        uint256 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint256 delegatorBalance = _balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint256 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint256 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint256 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == block.number) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(block.number, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /**\\n        @notice Ensure delegation moves when token is transferred.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        _moveDelegates(delegates[from], delegates[to], amount);\\n    }\\n\\n    function addMinter(address addresses) external {\\n        minter[addresses] = true;\\n    }\\n\\n    function subMinter(address addresses) external {\\n        minter[addresses] = false;\\n    }\\n}\\n\",\"keccak256\":\"0x4063334adbfe9ddabf7e8a50706301c38387af477405844e16e4587e85498831\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.10;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5e7c863b5ab16bc16a88ab5ce889edd21e9f834d3bcb6817818e8f3f16726694\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IgOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IgOHM is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sOHM) external;\\n}\\n\",\"keccak256\":\"0x975a03fd4822004e059d727cf32e474b5d3a12b73c9246afca4cab2551196698\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IsOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IsOHM is IERC20 {\\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function toG(uint256 amount) external view returns (uint256);\\n\\n    function fromG(uint256 amount) external view returns (uint256);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57486feac9a75b08024d2781d5a94c2a35a8a46f04c56771d6f20a646b3d65ff\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.10;\\n\\n// TODO(zx): replace with OZ implementation.\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    //     require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    //     return _functionCallWithValue(target, data, value, errorMessage);\\n    // }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bbb537b75f6742c52570a474cf43dbba4f6ee20bb127af31ced272f16890def\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x521bd2b4dea1c478051130fd4753d1f22ba6d59819d4df95b8b5ed75f04d1291\",\"license\":\"AGPL-3.0\"},\"contracts/types/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.10;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    // TODO comment actual hash value.\\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\\\"ERC20Token\\\");\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string internal _name;\\n\\n    string internal _symbol;\\n\\n    uint8 internal immutable _decimals;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5f5fe73caddc6ef1bcd196c961235c7afc4f68868885e80253e3a9d444991eac\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001d4d38038062001d4d833981016040819052620000349162000254565b604080518082018252600e81526d476f7665726e616e6365204f484d60901b602080830191825283518085019094526004845263674f484d60e01b9084015281519192916012916200008a916003919062000191565b508151620000a090600490602085019062000191565b5060ff1660805250506001600160a01b038216620001055760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a204d69677261746f720000000000000000000060448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b038481169190911790915581166200016a5760405162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a20734f484d60701b6044820152606401620000fc565b600580546001600160a01b0319166001600160a01b039290921691909117905550620002c9565b8280546200019f906200028c565b90600052602060002090601f016020900481019282620001c357600085556200020e565b82601f10620001de57805160ff19168380011785556200020e565b828001600101855582156200020e579182015b828111156200020e578251825591602001919060010190620001f1565b506200021c92915062000220565b5090565b5b808211156200021c576000815560010162000221565b80516001600160a01b03811681146200024f57600080fd5b919050565b600080604083850312156200026857600080fd5b620002738362000237565b9150620002836020840162000237565b90509250929050565b600181811c90821680620002a157607f821691505b60208210811415620002c357634e487b7160e01b600052602260045260246000fd5b50919050565b608051611a5a620002f360003960008181610326015281816108e10152610bd70152611a5a6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806340c10f191161010457806395d89b41116100a2578063a824876811610071578063a8248768146104a4578063a9059cbb146104b7578063b4b5ea57146104ca578063dd62ed3e146104dd57600080fd5b806395d89b4114610444578063983b2d561461044c5780639dc29fac1461047e578063a457c2d71461049157600080fd5b806366a5236c116100de57806366a5236c146103d55780636fcfff45146103e857806370a0823114610408578063782d6fe11461043157600080fd5b806340c10f1914610386578063587cde1e146103995780635c19a95c146103c257600080fd5b806319d40b08116101715780632c678c641161014b5780632c678c641461030b578063313ce5671461031f57806339509351146103505780633dd08c381461036357600080fd5b806319d40b08146102dd57806323b872dd146102f05780632986c0e51461030357600080fd5b80630cdfebfa116101ad5780630cdfebfa146102465780631068361f1461028d57806315079925146102a057806318160ddd146102cb57600080fd5b806302680304146101d457806306fdde0314610205578063095ea7b314610223575b600080fd5b6102036101e2366004611670565b6001600160a01b03166000908152600a60205260409020805460ff19169055565b005b61020d610516565b60405161021a919061168b565b60405180910390f35b6102366102313660046116e0565b6105a8565b604051901515815260200161021a565b6102786102543660046116e0565b60076020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161021a565b61020361029b36600461170a565b6105bf565b6005546102b3906001600160a01b031681565b6040516001600160a01b03909116815260200161021a565b6002545b60405190815260200161021a565b6006546102b3906001600160a01b031681565b6102366102fe36600461173d565b610770565b6102cf6107d9565b60065461023690600160a01b900460ff1681565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161021a565b61023661035e3660046116e0565b61084c565b610236610371366004611670565b600a6020526000908152604090205460ff1681565b6102036103943660046116e0565b610882565b6102b36103a7366004611670565b6009602052600090815260409020546001600160a01b031681565b6102036103d0366004611670565b6108bf565b6102cf6103e3366004611779565b6108cc565b6102cf6103f6366004611670565b60086020526000908152604090205481565b6102cf610416366004611670565b6001600160a01b031660009081526020819052604090205490565b6102cf61043f3660046116e0565b610914565b61020d610b36565b61020361045a366004611670565b6001600160a01b03166000908152600a60205260409020805460ff19166001179055565b61020361048c3660046116e0565b610b45565b61023661049f3660046116e0565b610b7e565b6102cf6104b2366004611779565b610bcd565b6102366104c53660046116e0565b610c08565b6102cf6104d8366004611670565b610c15565b6102cf6104eb36600461170a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461052590611792565b80601f016020809104026020016040519081016040528092919081815260200182805461055190611792565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b5338484610c78565b5060015b92915050565b336000908152600a602052604090205460ff166105f75760405162461bcd60e51b81526004016105ee906117cd565b60405180910390fd5b600654600160a01b900460ff161561063c5760405162461bcd60e51b8152602060048201526008602482015267135a59dc985d195960c21b60448201526064016105ee565b6006805460ff60a01b198116600160a01b179091556001600160a01b038381169116141561069f5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185c99dd5b595b9d60821b60448201526064016105ee565b6001600160a01b0382166106ea5760405162461bcd60e51b815260206004820152601260248201527116995c9bc81859191c995cdcc8199bdd5b9960721b60448201526064016105ee565b600680546001600160a01b0319166001600160a01b0384811691909117909155811661074d5760405162461bcd60e51b815260206004820152601260248201527116995c9bc81859191c995cdcc8199bdd5b9960721b60448201526064016105ee565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b600061077d848484610d9d565b6107cf84336107ca85604051806060016040528060288152602001611a01602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610f2b565b610c78565b5060019392505050565b60055460408051632986c0e560e01b815290516000926001600160a01b031691632986c0e59160048083019260209291908290030181865afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084791906117f4565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105b59185906107ca9086610f65565b336000908152600a602052604090205460ff166108b15760405162461bcd60e51b81526004016105ee906117cd565b6108bb8282610fc4565b5050565b6108c933826110af565b50565b60006105b96108d96107d9565b61090e6109077f0000000000000000000000000000000000000000000000000000000000000000600a611907565b859061112e565b906111ad565b60004382106109755760405162461bcd60e51b815260206004820152602760248201527f674f484d3a3a6765745072696f72566f7465733a206e6f742079657420646574604482015266195c9b5a5b995960ca1b60648201526084016105ee565b6001600160a01b0383166000908152600860205260409020548061099d5760009150506105b9565b6001600160a01b038416600090815260076020526040812084916109c2600185611916565b81526020019081526020016000206000015411610a17576001600160a01b0384166000908152600760205260408120906109fd600184611916565b8152602001908152602001600020600101549150506105b9565b6001600160a01b0384166000908152600760209081526040808320838052909152902054831015610a4c5760009150506105b9565b600080610a5a600184611916565b90505b81811115610b065760006002610a738484611916565b610a7d9190611943565b610a879083611916565b6001600160a01b0388166000908152600760209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090871415610ae0576020015194506105b99350505050565b8051871115610af157819350610aff565b610afc600183611916565b92505b5050610a5d565b506001600160a01b0385166000908152600760209081526040808320938352929052206001015491505092915050565b60606004805461052590611792565b336000908152600a602052604090205460ff16610b745760405162461bcd60e51b81526004016105ee906117cd565b6108bb82826111ef565b60006105b533846107ca85604051806060016040528060258152602001611a29602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610f2b565b60006105b9610bfd7f0000000000000000000000000000000000000000000000000000000000000000600a611907565b61090e6109076107d9565b60006105b5338484610d9d565b6001600160a01b03811660009081526008602052604081205480610c3a576000610c71565b6001600160a01b038316600090815260076020526040812090610c5e600184611916565b8152602001908152602001600020600101545b9392505050565b6001600160a01b038316610cda5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ee565b6001600160a01b038216610d3b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ee565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610e015760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ee565b6001600160a01b038216610e635760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ee565b610e6e8383836112ff565b610eab816040518060600160405280602681526020016119db602691396001600160a01b0386166000908152602081905260409020549190610f2b565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610eda9082610f65565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610d90565b60008184841115610f4f5760405162461bcd60e51b81526004016105ee919061168b565b506000610f5c8486611916565b95945050505050565b600080610f728385611957565b905083811015610c715760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105ee565b6001600160a01b03821661101a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105ee565b611026600083836112ff565b6002546110339082610f65565b6002556001600160a01b0382166000908152602081905260409020546110599082610f65565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a35050565b6001600160a01b038083166000818152600960208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611128828483611336565b50505050565b60008261113d575060006105b9565b6000611149838561196f565b9050826111568583611943565b14610c715760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105ee565b6000610c7183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611479565b6001600160a01b03821661124f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105ee565b61125b826000836112ff565b611298816040518060600160405280602281526020016119b9602291396001600160a01b0385166000908152602081905260409020549190610f2b565b6001600160a01b0383166000908152602081905260409020556002546112be90826114dd565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016110a3565b6001600160a01b0380841660009081526009602052604080822054858416835291205461133192918216911683611336565b505050565b816001600160a01b0316836001600160a01b0316141580156113585750600081115b15611331576001600160a01b038316156113e9576001600160a01b03831660009081526008602052604081205490816113925760006113c9565b6001600160a01b0385166000908152600760205260408120906113b6600185611916565b8152602001908152602001600020600101545b905060006113d782856114dd565b90506113e58684848461151f565b5050505b6001600160a01b03821615611331576001600160a01b038216600090815260086020526040812054908161141e576000611455565b6001600160a01b038416600090815260076020526040812090611442600185611916565b8152602001908152602001600020600101545b905060006114638285610f65565b90506114718584848461151f565b505050505050565b6000818361149a5760405162461bcd60e51b81526004016105ee919061168b565b5060006114a78486611943565b90506114b3848661198e565b6114bd828661196f565b6114c79190611957565b85146114d5576114d56119a2565b949350505050565b6000610c7183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f2b565b60008311801561156357506001600160a01b0384166000908152600760205260408120439161154f600187611916565b815260200190815260200160002060000154145b156115a6576001600160a01b0384166000908152600760205260408120829161158d600187611916565b815260208101919091526040016000206001015561160a565b60408051808201825243815260208082018481526001600160a01b0388166000908152600783528481208882529092529290209051815590516001918201556115f0908490611957565b6001600160a01b0385166000908152600860205260409020555b60408051838152602081018390526001600160a01b038616917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a250505050565b80356001600160a01b038116811461166b57600080fd5b919050565b60006020828403121561168257600080fd5b610c7182611654565b600060208083528351808285015260005b818110156116b85785810183015185820160400152820161169c565b818111156116ca576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156116f357600080fd5b6116fc83611654565b946020939093013593505050565b6000806040838503121561171d57600080fd5b61172683611654565b915061173460208401611654565b90509250929050565b60008060006060848603121561175257600080fd5b61175b84611654565b925061176960208501611654565b9150604084013590509250925092565b60006020828403121561178b57600080fd5b5035919050565b600181811c908216806117a657607f821691505b602082108114156117c757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c13db9b1e48185c1c1c9bdd9959609a1b604082015260600190565b60006020828403121561180657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561185e5781600019048211156118445761184461180d565b8085161561185157918102915b93841c9390800290611828565b509250929050565b600082611875575060016105b9565b81611882575060006105b9565b816001811461189857600281146118a2576118be565b60019150506105b9565b60ff8411156118b3576118b361180d565b50506001821b6105b9565b5060208310610133831016604e8410600b84101617156118e1575081810a6105b9565b6118eb8383611823565b80600019048211156118ff576118ff61180d565b029392505050565b6000610c7160ff841683611866565b6000828210156119285761192861180d565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826119525761195261192d565b500490565b6000821982111561196a5761196a61180d565b500190565b60008160001904831182151516156119895761198961180d565b500290565b60008261199d5761199d61192d565b500690565b634e487b7160e01b600052600160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806340c10f191161010457806395d89b41116100a2578063a824876811610071578063a8248768146104a4578063a9059cbb146104b7578063b4b5ea57146104ca578063dd62ed3e146104dd57600080fd5b806395d89b4114610444578063983b2d561461044c5780639dc29fac1461047e578063a457c2d71461049157600080fd5b806366a5236c116100de57806366a5236c146103d55780636fcfff45146103e857806370a0823114610408578063782d6fe11461043157600080fd5b806340c10f1914610386578063587cde1e146103995780635c19a95c146103c257600080fd5b806319d40b08116101715780632c678c641161014b5780632c678c641461030b578063313ce5671461031f57806339509351146103505780633dd08c381461036357600080fd5b806319d40b08146102dd57806323b872dd146102f05780632986c0e51461030357600080fd5b80630cdfebfa116101ad5780630cdfebfa146102465780631068361f1461028d57806315079925146102a057806318160ddd146102cb57600080fd5b806302680304146101d457806306fdde0314610205578063095ea7b314610223575b600080fd5b6102036101e2366004611670565b6001600160a01b03166000908152600a60205260409020805460ff19169055565b005b61020d610516565b60405161021a919061168b565b60405180910390f35b6102366102313660046116e0565b6105a8565b604051901515815260200161021a565b6102786102543660046116e0565b60076020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161021a565b61020361029b36600461170a565b6105bf565b6005546102b3906001600160a01b031681565b6040516001600160a01b03909116815260200161021a565b6002545b60405190815260200161021a565b6006546102b3906001600160a01b031681565b6102366102fe36600461173d565b610770565b6102cf6107d9565b60065461023690600160a01b900460ff1681565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161021a565b61023661035e3660046116e0565b61084c565b610236610371366004611670565b600a6020526000908152604090205460ff1681565b6102036103943660046116e0565b610882565b6102b36103a7366004611670565b6009602052600090815260409020546001600160a01b031681565b6102036103d0366004611670565b6108bf565b6102cf6103e3366004611779565b6108cc565b6102cf6103f6366004611670565b60086020526000908152604090205481565b6102cf610416366004611670565b6001600160a01b031660009081526020819052604090205490565b6102cf61043f3660046116e0565b610914565b61020d610b36565b61020361045a366004611670565b6001600160a01b03166000908152600a60205260409020805460ff19166001179055565b61020361048c3660046116e0565b610b45565b61023661049f3660046116e0565b610b7e565b6102cf6104b2366004611779565b610bcd565b6102366104c53660046116e0565b610c08565b6102cf6104d8366004611670565b610c15565b6102cf6104eb36600461170a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461052590611792565b80601f016020809104026020016040519081016040528092919081815260200182805461055190611792565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b60006105b5338484610c78565b5060015b92915050565b336000908152600a602052604090205460ff166105f75760405162461bcd60e51b81526004016105ee906117cd565b60405180910390fd5b600654600160a01b900460ff161561063c5760405162461bcd60e51b8152602060048201526008602482015267135a59dc985d195960c21b60448201526064016105ee565b6006805460ff60a01b198116600160a01b179091556001600160a01b038381169116141561069f5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185c99dd5b595b9d60821b60448201526064016105ee565b6001600160a01b0382166106ea5760405162461bcd60e51b815260206004820152601260248201527116995c9bc81859191c995cdcc8199bdd5b9960721b60448201526064016105ee565b600680546001600160a01b0319166001600160a01b0384811691909117909155811661074d5760405162461bcd60e51b815260206004820152601260248201527116995c9bc81859191c995cdcc8199bdd5b9960721b60448201526064016105ee565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b600061077d848484610d9d565b6107cf84336107ca85604051806060016040528060288152602001611a01602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610f2b565b610c78565b5060019392505050565b60055460408051632986c0e560e01b815290516000926001600160a01b031691632986c0e59160048083019260209291908290030181865afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084791906117f4565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105b59185906107ca9086610f65565b336000908152600a602052604090205460ff166108b15760405162461bcd60e51b81526004016105ee906117cd565b6108bb8282610fc4565b5050565b6108c933826110af565b50565b60006105b96108d96107d9565b61090e6109077f0000000000000000000000000000000000000000000000000000000000000000600a611907565b859061112e565b906111ad565b60004382106109755760405162461bcd60e51b815260206004820152602760248201527f674f484d3a3a6765745072696f72566f7465733a206e6f742079657420646574604482015266195c9b5a5b995960ca1b60648201526084016105ee565b6001600160a01b0383166000908152600860205260409020548061099d5760009150506105b9565b6001600160a01b038416600090815260076020526040812084916109c2600185611916565b81526020019081526020016000206000015411610a17576001600160a01b0384166000908152600760205260408120906109fd600184611916565b8152602001908152602001600020600101549150506105b9565b6001600160a01b0384166000908152600760209081526040808320838052909152902054831015610a4c5760009150506105b9565b600080610a5a600184611916565b90505b81811115610b065760006002610a738484611916565b610a7d9190611943565b610a879083611916565b6001600160a01b0388166000908152600760209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090871415610ae0576020015194506105b99350505050565b8051871115610af157819350610aff565b610afc600183611916565b92505b5050610a5d565b506001600160a01b0385166000908152600760209081526040808320938352929052206001015491505092915050565b60606004805461052590611792565b336000908152600a602052604090205460ff16610b745760405162461bcd60e51b81526004016105ee906117cd565b6108bb82826111ef565b60006105b533846107ca85604051806060016040528060258152602001611a29602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610f2b565b60006105b9610bfd7f0000000000000000000000000000000000000000000000000000000000000000600a611907565b61090e6109076107d9565b60006105b5338484610d9d565b6001600160a01b03811660009081526008602052604081205480610c3a576000610c71565b6001600160a01b038316600090815260076020526040812090610c5e600184611916565b8152602001908152602001600020600101545b9392505050565b6001600160a01b038316610cda5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ee565b6001600160a01b038216610d3b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ee565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610e015760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ee565b6001600160a01b038216610e635760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ee565b610e6e8383836112ff565b610eab816040518060600160405280602681526020016119db602691396001600160a01b0386166000908152602081905260409020549190610f2b565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610eda9082610f65565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610d90565b60008184841115610f4f5760405162461bcd60e51b81526004016105ee919061168b565b506000610f5c8486611916565b95945050505050565b600080610f728385611957565b905083811015610c715760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105ee565b6001600160a01b03821661101a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105ee565b611026600083836112ff565b6002546110339082610f65565b6002556001600160a01b0382166000908152602081905260409020546110599082610f65565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a35050565b6001600160a01b038083166000818152600960208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611128828483611336565b50505050565b60008261113d575060006105b9565b6000611149838561196f565b9050826111568583611943565b14610c715760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016105ee565b6000610c7183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611479565b6001600160a01b03821661124f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105ee565b61125b826000836112ff565b611298816040518060600160405280602281526020016119b9602291396001600160a01b0385166000908152602081905260409020549190610f2b565b6001600160a01b0383166000908152602081905260409020556002546112be90826114dd565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016110a3565b6001600160a01b0380841660009081526009602052604080822054858416835291205461133192918216911683611336565b505050565b816001600160a01b0316836001600160a01b0316141580156113585750600081115b15611331576001600160a01b038316156113e9576001600160a01b03831660009081526008602052604081205490816113925760006113c9565b6001600160a01b0385166000908152600760205260408120906113b6600185611916565b8152602001908152602001600020600101545b905060006113d782856114dd565b90506113e58684848461151f565b5050505b6001600160a01b03821615611331576001600160a01b038216600090815260086020526040812054908161141e576000611455565b6001600160a01b038416600090815260076020526040812090611442600185611916565b8152602001908152602001600020600101545b905060006114638285610f65565b90506114718584848461151f565b505050505050565b6000818361149a5760405162461bcd60e51b81526004016105ee919061168b565b5060006114a78486611943565b90506114b3848661198e565b6114bd828661196f565b6114c79190611957565b85146114d5576114d56119a2565b949350505050565b6000610c7183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f2b565b60008311801561156357506001600160a01b0384166000908152600760205260408120439161154f600187611916565b815260200190815260200160002060000154145b156115a6576001600160a01b0384166000908152600760205260408120829161158d600187611916565b815260208101919091526040016000206001015561160a565b60408051808201825243815260208082018481526001600160a01b0388166000908152600783528481208882529092529290209051815590516001918201556115f0908490611957565b6001600160a01b0385166000908152600860205260409020555b60408051838152602081018390526001600160a01b038616917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a250505050565b80356001600160a01b038116811461166b57600080fd5b919050565b60006020828403121561168257600080fd5b610c7182611654565b600060208083528351808285015260005b818110156116b85785810183015185820160400152820161169c565b818111156116ca576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156116f357600080fd5b6116fc83611654565b946020939093013593505050565b6000806040838503121561171d57600080fd5b61172683611654565b915061173460208401611654565b90509250929050565b60008060006060848603121561175257600080fd5b61175b84611654565b925061176960208501611654565b9150604084013590509250925092565b60006020828403121561178b57600080fd5b5035919050565b600181811c908216806117a657607f821691505b602082108114156117c757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c13db9b1e48185c1c1c9bdd9959609a1b604082015260600190565b60006020828403121561180657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561185e5781600019048211156118445761184461180d565b8085161561185157918102915b93841c9390800290611828565b509250929050565b600082611875575060016105b9565b81611882575060006105b9565b816001811461189857600281146118a2576118be565b60019150506105b9565b60ff8411156118b3576118b361180d565b50506001821b6105b9565b5060208310610133831016604e8410600b84101617156118e1575081810a6105b9565b6118eb8383611823565b80600019048211156118ff576118ff61180d565b029392505050565b6000610c7160ff841683611866565b6000828210156119285761192861180d565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826119525761195261192d565b500490565b6000821982111561196a5761196a61180d565b500190565b60008160001904831182151516156119895761198961180d565b500290565b60008261199d5761199d61192d565b500690565b634e487b7160e01b600052600160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceFrom(uint256)": {
        "params": {
          "_amount": "uintbalanceTo"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "balanceTo(uint256)": {
        "params": {
          "_amount": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_from": "address"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "migrate(address,address)": {
        "params": {
          "_sOHM": "address",
          "_staking": "address"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceFrom(uint256)": {
        "notice": "converts gOHM amount to OHM"
      },
      "balanceTo(uint256)": {
        "notice": "converts OHM amount to gOHM"
      },
      "burn(address,uint256)": {
        "notice": "burn gOHM"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "index()": {
        "notice": "pull index from sOHM token"
      },
      "migrate(address,address)": {
        "notice": "transfer mint rights from migrator to stakingcan only be done once, at the time of contract migration"
      },
      "mint(address,uint256)": {
        "notice": "mint gOHM"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22288,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22294,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 22296,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22298,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 22300,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 13809,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "sOHM",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IsOHM)15656"
      },
      {
        "astId": 13811,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "approved",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13813,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "migrated",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 13820,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "checkpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)13806_storage))"
      },
      {
        "astId": 13824,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13828,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "delegates",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13832,
        "contract": "contracts/governance/gOHM.sol:gOHM",
        "label": "minter",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IsOHM)15656": {
        "encoding": "inplace",
        "label": "contract IsOHM",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)13806_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct gOHM.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Checkpoint)13806_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Checkpoint)13806_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct gOHM.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)13806_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)13806_storage": {
        "encoding": "inplace",
        "label": "struct gOHM.Checkpoint",
        "members": [
          {
            "astId": 13803,
            "contract": "contracts/governance/gOHM.sol:gOHM",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13805,
            "contract": "contracts/governance/gOHM.sol:gOHM",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}