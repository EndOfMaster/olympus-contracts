{
  "address": "0xfE80427685cfbe7b3F0BB17eE9f7C85c926b911d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "contract IgOHM",
          "name": "_gohm",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "names",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_sendgOHM",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_sendgOHM",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb578c4069fc6ee5326558bf65a3a6bfda6a97bb172ebc99c970855b7117ef5a5",
  "receipt": {
    "to": null,
    "from": "0xAE4bdBb0824C9B602589a5DaD2aD96C8A2AcC607",
    "contractAddress": "0xfE80427685cfbe7b3F0BB17eE9f7C85c926b911d",
    "transactionIndex": 16,
    "gasUsed": "3989000",
    "logsBloom": "0x
    "blockHash": "0x410b61b58dc7d9101e48c5447d0ba61f88cc74ab8dc4ba86605c83a343ceba2d",
    "transactionHash": "0xb578c4069fc6ee5326558bf65a3a6bfda6a97bb172ebc99c970855b7117ef5a5",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 10229484,
        "transactionHash": "0xb578c4069fc6ee5326558bf65a3a6bfda6a97bb172ebc99c970855b7117ef5a5",
        "address": "0xfE80427685cfbe7b3F0BB17eE9f7C85c926b911d",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000007c6b55944ffc0a6f9980e7c1f097b5ce23c31cb"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x410b61b58dc7d9101e48c5447d0ba61f88cc74ab8dc4ba86605c83a343ceba2d"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 10229484,
        "transactionHash": "0xb578c4069fc6ee5326558bf65a3a6bfda6a97bb172ebc99c970855b7117ef5a5",
        "address": "0x5Ce81e1813F0bbA1Ec4c30B55Bb94F1fb5eEd4a4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fe80427685cfbe7b3f0bb17ee9f7c85c926b911d",
          "0x000000000000000000000000e7bc96e7adb305e8fcc17e0364f5a2b462dad8b2"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 14,
        "blockHash": "0x410b61b58dc7d9101e48c5447d0ba61f88cc74ab8dc4ba86605c83a343ceba2d"
      }
    ],
    "blockNumber": 10229484,
    "cumulativeGasUsed": "11085599",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x07C6b55944ffC0a6F9980E7C1F097b5Ce23C31CB",
    "0x5Ce81e1813F0bbA1Ec4c30B55Bb94F1fb5eEd4a4",
    "0x537773465996e4E380731F28c305EeC6826B58AB",
    "0xE7bc96e7AdB305E8FCC17e0364f5a2b462dAd8B2"
  ],
  "solcInputHash": "d3dfe3372a8b5a98b0fd3fd96c1c5b43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"contract IgOHM\",\"name\":\"_gohm\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_sendgOHM\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendgOHM\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeus, Indigo Review by: JeffX\",\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(string,address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval, tune interval]\",\"_market\":\"[capacity (in OHM or quote), initial price (9 decimals), debt buffer (3 decimals)]\",\"_name\":\"off-chain generated name for market. format ex: \\\"DAI\\\" or \\\"OHM-DAI\\\"\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in OHM decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in OHM decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of gOHM due\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in OHM decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of OHM to be paid in OHM decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gOHM\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_sendgOHM\":\"send payout as gOHM or sOHM\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in gOHM\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_sendgOHM\":\"send payout as gOHM or sOHM\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gOHM\"}}},\"title\":\"Olympus Bond Depository V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(string,address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"OlympusBondDepositoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n/// @title Olympus Bond Depository V2\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract OlympusBondDepositoryV2 is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 id, address baseToken, address quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 id);\\n    event Bond(uint256 id, uint256 amount, uint256 payout, uint256 expires, uint256 price);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n    string[] public names; // market names (for front ends)\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IgOHM _gohm,\\n        IStaking _staking\\n    ) NoteKeeper(_authority, _ohm, _gohm, _staking) {\\n        // save gas for users by bulk approving stake() transactions\\n        _ohm.approve(address(_staking), 1e45);\\n        markets.push();\\n        names.push();\\n        terms.push();\\n        metadata.push();\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return payout_     the amount of gOHM due\\n     * @return expiry_     the timestamp at which payout is redeemable\\n     * @return index_      the user index of the Note (used to redeem or query information)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(block.timestamp < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id);\\n\\n        uint256 price = _marketPrice(_id);\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = OHM out\\n         * amount = quote tokens in\\n         * price = quote tokens : ohm (i.e. 42069 DAI : OHM)\\n         *\\n         * 1e18 = OHM decimals (9) + price decimals (9)\\n         */\\n        payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of OHM that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        uint256 capacityToUse = market.capacityInQuote ? _amount : payout_;\\n\\n        require(capacityToUse <= market.capacity, \\\"Depository: capacity exceeded\\\");\\n        market.capacity -= capacityToUse;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        expiry_ = term.fixedTerm ? term.vesting + block.timestamp : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much OHM has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        emit Bond(_id, _amount, payout_, expiry_, price);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        index_ = addNote(_user, payout_, uint48(expiry_), uint48(_id), _referral);\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id);\\n        }\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     */\\n    function _decay(uint256 _id) internal {\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = currentTime;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint64 adjustBy, uint48 secondsSinceLast, bool stillActive) = _controlDecay(_id);\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= adjustBy;\\n                adjustment.timeToAdjusted -= secondsSinceLast;\\n                adjustment.lastAdjustment = currentTime;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     */\\n    function _tune(uint256 _id) internal {\\n        Market memory market = markets[_id];\\n        Metadata memory meta = metadata[_id];\\n        uint48 time = uint48(block.timestamp);\\n\\n        if (time >= meta.lastTune + meta.tuneInterval) {\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // ohm decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 OHM. max payout would be 1,000 OHM (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * treasury.baseSupply()) / targetDebt);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _name        off-chain generated name for market. format ex: \\\"DAI\\\" or \\\"OHM-DAI\\\"\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in OHM or quote), initial price (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval, tune interval]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        string memory _name,\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override returns (uint256 id_) {\\n        /*\\n         * Format exemplars: \\\"FRAX\\\", \\\"OHM-DAI\\\"\\n         */\\n        names.push(_name);\\n\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = ohm decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 OHM, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 OHM.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer must be >100,000 (aka greater than 100%)\\n         */\\n        require(_market[2] > 1e5, \\\"Debt buffer less than initial debt\\\");\\n        uint256 maxDebt = (targetDebt * _market[2]) / 1e5; // 1e5 = 100,000. 110,000 / 100,000 = 110%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * treasury.baseSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(ohm), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in OHM decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of OHM to be paid in OHM decimals\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return\\n            (_amount * 1e18) / // = ohm decimals (9) + market price decimals (9)\\n            marketPrice(_id) /\\n            10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in OHM decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 totalDebt = markets[_id].totalDebt;\\n        uint256 secondsSinceLast = block.timestamp - meta.lastDecay;\\n\\n        return uint64((totalDebt * secondsSinceLast) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in OHM decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        (uint64 decay, , ) = _controlDecay(_id);\\n        return terms[_id].controlVariable - decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in OHM decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return decay_           change in control variable\\n     * @return secondsSince_    seconds since last change in control variable\\n     * @return active_          whether or not change remains active\\n     */\\n    function _controlDecay(uint256 _id)\\n        internal\\n        view\\n        returns (\\n            uint64 decay_,\\n            uint48 secondsSince_,\\n            bool active_\\n        )\\n    {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return (0, 0, false);\\n\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        active_ = secondsSince_ < info.timeToAdjusted;\\n        decay_ = active_ ? (info.change * secondsSince_) / info.timeToAdjusted : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x59e91f78536b5bfcf87ce6cc62a0e4f3145241d383794a0a4b78cfe6369ecdee\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures\\n        uint64 maxDebt; // 9 decimal debt maximum in OHM\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        string memory _name, // name for market. ex: \\\"OHM-DAI\\\"\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x15fdd4fe1808a9e7ad607a0a6af7d2e63bb44c09e5855f4e2c79992baa92825f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gOHM remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _sendgOHM) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0xd67f49fd7a8dd1d6619311f9177ce866e7f200b717adef705beedfd29b445b11\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5481248b924479a867d252882a1be9573e4aefe3c7816045e1c0c25daacca70\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IgOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IgOHM is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sOHM) external;\\n}\\n\",\"keccak256\":\"0x0e61aa62110e1fa27c32948b2fea2aa7a4805e1c2bdffc489bb39bf7bfb121b1\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is OlympusAccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n    IERC20 internal immutable ohm; // reward token\\n\\n    constructor(IOlympusAuthority _authority, IERC20 _ohm) OlympusAccessControlled(_authority) {\\n        ohm = _ohm;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        ohm.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n}\\n\",\"keccak256\":\"0x89e0f0f5e779cf913a2d921c5cb67c6eb2083f3d122b5ee3556045189265635d\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IgOHM.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgOHM internal immutable gOHM;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IgOHM _gohm,\\n        IStaking _staking\\n    ) FrontEndRewarder(_authority, _ohm) {\\n        gOHM = _gohm;\\n        staking = _staking;\\n        treasury = ITreasury(_authority.vault());\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout \\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of OHM due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gOHM.balanceTo(_payout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        // note that only the payout gets staked (front end rewards are in OHM)\\n        staking.stake(address(this), _payout, false, true);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return payout_     sum of payout sent, in gOHM\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_sendgOHM) {\\n            gOHM.transfer(_user, payout_); // send payout as gOHM\\n        } else {\\n            staking.unwrap(_user, payout_); // unwrap and send payout as sOHM\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return             sum of payout sent, in gOHM\\n     */\\n    function redeemAll(address _user, bool _sendgOHM) external override returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _sendgOHM);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        uint256 length;\\n        for (uint256 i = 0; i < notes[_user].length; i++) {\\n            if (notes[_user][i].redeemed == 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < notes[_user].length; i++) {\\n            if (notes[_user][i].redeemed == 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gOHM\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x9c31094d1efc09ffd6af4926fbf54e488ede40d8d5f6bc659c9b5a7682a63067\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b61010090815262000031916000919062000216565b503480156200003f57600080fd5b506040516200478d3803806200478d8339810160408190526200006291620002d5565b600180546001600160a01b0319166001600160a01b0386169081179091556040518591859185918591859185918391907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805283811660a05282811660c0526040805163fbfa77cf60e01b81529051918716925063fbfa77cf9160048083019260209291908290030181865afa15801562000113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013991906200033d565b600880546001600160a01b0319166001600160a01b0392831617905560405163095ea7b360e01b81528682166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908816945063095ea7b3935060440191506200019c9050565b6020604051808303816000875af1158015620001bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e2919062000364565b5050600980546001908101909155600d805482019055600a805482019055600b8054909101815560005250620003c5915050565b828054620002249062000388565b90600052602060002090601f01602090048101928262000248576000855562000293565b82601f106200026357805160ff191683800117855562000293565b8280016001018555821562000293579182015b828111156200029357825182559160200191906001019062000276565b50620002a1929150620002a5565b5090565b5b80821115620002a15760008155600101620002a6565b6001600160a01b0381168114620002d257600080fd5b50565b60008060008060808587031215620002ec57600080fd5b8451620002f981620002bc565b60208601519094506200030c81620002bc565b60408601519093506200031f81620002bc565b60608601519092506200033281620002bc565b939692955090935050565b6000602082840312156200035057600080fd5b81516200035d81620002bc565b9392505050565b6000602082840312156200037757600080fd5b815180151581146200035d57600080fd5b600181811c908216806200039d57607f821691505b60208210811415620003bf57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516143836200040a600039600081816125f00152612fd50152600081816125570152612df8015260008181610962015261116c01526143836000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063a422061011610125578063c9b67af5116100ad578063e0b117ff1161007c578063e0b117ff146105e1578063e3684e3914610629578063e481b26514610680578063f1b7dc7814610693578063f3191a46146106a657600080fd5b8063c9b67af514610590578063d62fbdd314610598578063d6db4df8146105ab578063d936547e146105be57600080fd5b8063bcb29667116100f4578063bcb29667146104c8578063bf7e214f146104db578063c0680e2014610506578063c0aa0e8a14610519578063c3e0fb1c1461056857600080fd5b8063a4220610146103a0578063abbf4b17146103b3578063b1283e77146103de578063bc3b2b121461043e57600080fd5b806346aed74e116101a85780636a6c575d116101775780636a6c575d146103315780637a9e5e4b146103445780637c770aae146103575780639b19251a146103855780639c7697871461039857600080fd5b806346aed74e146102d857806360230ea8146102eb57806364914439146102fe578063654e51e71461031e57600080fd5b806327507458116101e4578063275074581461027a5780633adec5a71461029d5780633d18b912146102b05780634622ab03146102b857600080fd5b80630700037d146102165780630a9d85eb146102495780630aebeb4e1461025c5780631885f58014610271575b600080fd5b610236610224366004613a00565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b610236610257366004613a1d565b6106af565b61026f61026a366004613a1d565b610707565b005b61023660025481565b61028d610288366004613a1d565b610862565b6040519015158152602001610240565b6102366102ab366004613a1d565b6108cb565b61026f610927565b6102cb6102c6366004613a1d565b6109d3565b6040516102409190613a62565b6102366102e6366004613ab3565b610a7f565b6102366102f9366004613cbd565b610a9b565b61031161030c366004613a00565b6111ec565b6040516102409190613da9565b61026f61032c366004613ded565b61137a565b61023661033f366004613ded565b611431565b61026f610352366004613a00565b611501565b61036a610365366004613e0f565b6115f7565b60408051938452602084019290925290820152606001610240565b61026f610393366004613a00565b611a79565b61026f611b4e565b6102366103ae366004613e65565b611dd4565b6103c66103c1366004613a1d565b61203d565b6040516001600160401b039091168152602001610240565b6103f16103ec366004613a1d565b612153565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610240565b61049061044c366004613a1d565b600c602052600090815260409020546001600160401b0381169065ffffffffffff600160401b8204811691600160701b81049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610240565b6102366104d6366004613a1d565b6121c1565b6001546104ee906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b610236610514366004613e65565b61221d565b61052c610527366004613a1d565b61224e565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610240565b61057b610576366004613e65565b6122a7565b60408051928352901515602083015201610240565b610311612366565b6102366105a6366004613e91565b61244e565b61026f6105b9366004613e65565b612667565b61028d6105cc366004613a00565b60056020526000908152604090205460ff1681565b6105f46105ef366004613e65565b612729565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610240565b61063c610637366004613a1d565b61278c565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610240565b61031161068e366004613a00565b6127ea565b6102366106a1366004613a1d565b612985565b61023660035481565b6000806106bb83612a30565b5050905080600a84815481106106d3576106d3613f5b565b6000918252602090912001546106f7919061010090046001600160401b0316613f87565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613faf565b6001600160a01b0316336001600160a01b0316146000906107bb5760405162461bcd60e51b81526004016107b29190614007565b60405180910390fd5b5042600a82815481106107d0576107d0613f5b565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060006009828154811061081457610814613f5b565b60009182526020909120600490910201556040517f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe5906108579083815260200190565b60405180910390a150565b60006009828154811061087757610877613f5b565b9060005260206000209060040201600001546000141580156108c5575042600a83815481106108a8576108a8613f5b565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600b82815481106108e0576108e0613f5b565b60009182526020909120015461090190600160f01b900460ff16600a614193565b61090a83612985565b610913846106af565b61091d91906141a2565b6108c591906141d7565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906141eb565b5050565b600d81815481106109e357600080fd5b9060005260206000200160009150905080546109fe90613fcc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2a90613fcc565b8015610a775780601f10610a4c57610100808354040283529160200191610a77565b820191906000526020600020905b815481529060010190602001808311610a5a57829003601f168201915b505050505081565b6000610a9483610a8e856127ea565b8461244e565b9392505050565b600d805460018101825560009182528751610add917fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019060208a019061394f565b506020830151600090610af1904290614208565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061421f565b60ff169050600086816020020151610b70578751610ba8565b610b7b82600a614242565b60208901518951610b9490670de0b6b3a76400006141a2565b610b9e91906141d7565b610ba891906141d7565b85519091506000908490610bc29063ffffffff168461424e565b6001600160401b0316610bd591906141d7565b9050620186a0896002602002015111610c3b5760405162461bcd60e51b815260206004820152602260248201527f4465627420627566666572206c657373207468616e20696e697469616c206465604482015261189d60f21b60648201526084016107b2565b6000620186a08a60026020020151610c5c906001600160401b0386166141a2565b610c6691906141d7565b90506000836001600160401b0316600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb919061427d565b60208d0151610cfa91906141a2565b610d0491906141d7565b600980546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610d4a57610d4a613f5b565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b026001600160a81b03199092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600a9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610e7657610e76613f5b565b602002015165ffffffffffff1681526020018b600160028110610e9b57610e9b613f5b565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b0265ffffffffffff60781b19938a16600160481b029390931674ffffffffffffffffffffffff0000000000000000001995909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600b9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600e60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150557f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f63877f00000000000000000000000000000000000000000000000000000000000000008e8e60016003811061119f5761119f613f5b565b60200201516040516111d494939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050505050509695505050505050565b6001600160a01b0381166000908152600e6020908152604080832080548251818502810185019093528083526060949383018282801561124b57602002820191906000526020600020905b815481526020019060010190808311611237575b50505050509050600080600090505b82518110156112aa5761128583828151811061127857611278613f5b565b6020026020010151610862565b15611298578161129481614296565b9250505b806112a281614296565b91505061125a565b506000816001600160401b038111156112c5576112c5613aec565b6040519080825280602002602001820160405280156112ee578160200160208202803683370190505b5090506000805b845181101561136f5761131385828151811061127857611278613f5b565b1561135d5784818151811061132a5761132a613f5b565b602002602001015183838151811061134457611344613f5b565b60209081029190910101528161135981614296565b9250505b8061136781614296565b9150506112f5565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190613faf565b6001600160a01b0316336001600160a01b0316146000906114255760405162461bcd60e51b81526004016107b29190614007565b50600391909155600255565b600080600b838154811061144757611447613f5b565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a082018190529091506114ca90600a614193565b6114d3846108cb565b6114e586670de0b6b3a76400006141a2565b6114ef91906141d7565b6114f991906141d7565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115789190613faf565b6001600160a01b0316336001600160a01b0316146000906115ac5760405162461bcd60e51b81526004016107b29190614007565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6000806000806009898154811061161057611610613f5b565b906000526020600020906004020190506000600a8a8154811061163557611635613f5b565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff600160481b8204811693830193909352600160781b810490921660608201819052600160a81b909204909216608083015290915042106116f65760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107b2565b6116ff8a612b1d565b600061170a8b612d41565b90508881111561175c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107b2565b600b8b8154811061176f5761176f613f5b565b60009182526020909120015461179090600160f01b900460ff16600a614193565b816117a38c670de0b6b3a76400006141a2565b6117ad91906141d7565b6117b791906141d7565b60028401549096506001600160401b03168611156118175760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107b2565b6001830154600090600160a01b900460ff166118335786611835565b8a5b84549091508111156118895760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a20636170616369747920657863656564656400000060448201526064016107b2565b8084600001600082825461189d9190614208565b909155505082516118ba57826040015165ffffffffffff166118d2565b42836040015165ffffffffffff166118d291906142b1565b95508a8460030160008282546118e891906142b1565b9091555050600284018054889190600890611914908490600160401b90046001600160401b03166142c9565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b031661195e91906142c9565b82546001600160401b039182166101009390930a928302919092021990911617905550604080518d8152602081018d905290810188905260608101879052608081018390527f88cb2f3205c1e6922dff1d83796d87350afaa71b7dc3fdac4f1dd228ef15f2419060a00160405180910390a16119dd8988888f8c612db7565b6008546001860154919650611a01916001600160a01b03908116913391168e613057565b600184015460808401516001600160401b03600160a81b909204821691161015611a6157600084556040518c81527f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe59060200160405180910390a1611a6a565b611a6a8c61316a565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190613faf565b6001600160a01b0316336001600160a01b031614600090611b245760405162461bcd60e51b81526004016107b29190614007565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190613faf565b6001600160a01b0316336001600160a01b03161480611c6b5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190613faf565b6001600160a01b0316336001600160a01b0316145b80611cfd5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190613faf565b6001600160a01b0316336001600160a01b0316145b611d3b5760405162461bcd60e51b815260206004820152600f60248201526e13db9b1e48185d5d1a1bdc9a5e9959608a1b60448201526064016107b2565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db29190613faf565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611e4a5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107b2565b6001600160a01b0383166000908152600660205260409020805483908110611e7457611e74613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611ee45760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107b2565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611f1c57611f1c613f5b565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160265ffffffffffff60601b198216811783559554600160901b9081900490941690930265ffffffffffff60901b199095166bffffffffffffffffffffffff60601b19909316929092179390931790556001600160a01b038516815260069091526040902080548390811061201457612014613f5b565b60009182526020822060029091020190815560010180546001600160c01b031916905592915050565b600080600b838154811061205357612053613f5b565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b8204811693850193909352600160601b8104831691840191909152600160901b810482166060840152600160c01b81049091166080830152600160f01b900460ff1660a08201526009805491935090859081106120dc576120dc613f5b565b906000526020600020906004020160010160159054906101000a90046001600160401b03166001600160401b031690506000826020015165ffffffffffff16426121269190614208565b604084015190915065ffffffffffff1661214082846141a2565b61214a91906141d7565b95945050505050565b6009818154811061216357600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b60006121cc8261203d565b600983815481106121df576121df613f5b565b906000526020600020906004020160010160159054906101000a90046001600160401b031661220e9190613f87565b6001600160401b031692915050565b600e602052816000526040600020818154811061223957600080fd5b90600052602060002001600091509150505481565b600a818154811061225e57600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff600160481b8204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600660205260408120805482918291859081106122d5576122d5613f5b565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b9092049093166080830152919450915015801561235c575042816040015165ffffffffffff1611155b9150509250929050565b60606000805b6009548110156123a45761237f81610862565b15612392578161238e81614296565b9250505b8061239c81614296565b91505061236c565b506000816001600160401b038111156123bf576123bf613aec565b6040519080825280602002602001820160405280156123e8578160200160208202803683370190505b5090506000805b6009548110156124455761240281610862565b15612433578083838151811061241a5761241a613f5b565b60209081029190910101528161242f81614296565b9250505b8061243d81614296565b9150506123ef565b50909392505050565b600042815b845181101561252a576000806124828888858151811061247557612475613f5b565b60200260200101516122a7565b915091508015612515576001600160a01b038816600090815260066020526040902087518591908990869081106124bb576124bb613f5b565b6020026020010151815481106124d3576124d3613f5b565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561251291906142b1565b94505b5050808061252290614296565b915050612453565b5082156125ca5760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c491906141eb565b5061265f565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af1158015612639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265d919061427d565b505b509392505050565b33600090815260066020526040902080548290811061268857612688613f5b565b600091825260209091206001600290920201015465ffffffffffff166126f05760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107b2565b3360009081526007602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061274557600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600b818154811061279c57600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b60606000805b6001600160a01b038416600090815260066020526040902054811015612881576001600160a01b038416600090815260066020526040902080548290811061283a5761283a613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1661286f578161286b81614296565b9250505b8061287981614296565b9150506127f0565b506000816001600160401b0381111561289c5761289c613aec565b6040519080825280602002602001820160405280156128c5578160200160208202803683370190505b5090506000805b6001600160a01b03861660009081526006602052604090205481101561297b576001600160a01b038616600090815260066020526040902080548290811061291657612916613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16612969578083838151811061295057612950613f5b565b60209081029190910101528161296581614296565b9250505b8061297381614296565b9150506128cc565b5090949350505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f3919061427d565b600b8381548110612a0657612a06613f5b565b600091825260209091200154612a2790600160f01b900460ff16600a614193565b610913846121c1565b6000818152600c60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff90811694830194909452600160701b810490931691810191909152600160a01b90910460ff1615156060820181905282918291612aad57600080600093509350935050612b16565b6020810151612abc90426142f4565b9250806040015165ffffffffffff168365ffffffffffff1610915081612ae3578051612b12565b806040015165ffffffffffff168365ffffffffffff168260000151612b08919061424e565b612b129190614313565b9350505b9193909250565b42612b278261203d565b60098381548110612b3a57612b3a613f5b565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612b6c9190613f87565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600b8381548110612ba457612ba4613f5b565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600c909152604090205460ff600160a01b90910416156109cf576000828152600c60205260408120908080612c1386612a30565b92509250925082600a8781548110612c2d57612c2d613f5b565b60009182526020909120018054600190612c5690849061010090046001600160401b0316613f87565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612d2d57835483908590600090612c9d9084906001600160401b0316613f87565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612ce691906142f4565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612d39565b835460ff60a01b191684555b505050505050565b6000600b8281548110612d5657612d56613f5b565b600091825260209091200154612d7790600160f01b900460ff16600a614193565b612d8083613679565b600a8481548110612d9357612d93613f5b565b60009182526020909120015461091d919061010090046001600160401b03166141a2565b6001600160a01b03858116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015612e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e62919061427d565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b02969096166bffffffffffffffffffffffff60601b19978516600160301b026bffffffffffffffffffffffff199093169390941692909217179490941617919091179055612f30868461375c565b6008549091506001600160a01b03166340c10f1930612f4f848a6142b1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612f9557600080fd5b505af1158015612fa9573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af1158015613028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304c919061427d565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916130bb9190614339565b6000604051808303816000865af19150503d80600081146130f8576040519150601f19603f3d011682016040523d82523d6000602084013e6130fd565b606091505b509150915081801561312757508051158061312757508080602001905181019061312791906141eb565b612d395760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016107b2565b60006009828154811061317f5761317f613f5b565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600b8054919350908490811061321c5761321c613f5b565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a083015290925042916132a19190614355565b65ffffffffffff168165ffffffffffff161061367357600081600a86815481106132cd576132cd613f5b565b6000918252602090912001546132f29190600160781b900465ffffffffffff166142f4565b65ffffffffffff169050600061330786612d41565b90506000856040015161331b578551613355565b60a085015161332b90600a614193565b8651839061334190670de0b6b3a76400006141a2565b61334b91906141d7565b61335591906141d7565b905082856060015165ffffffffffff168261337091906141a2565b61337a91906141d7565b6009888154811061338d5761338d613f5b565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff16836133dd91906141a2565b6133e791906141d7565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561343f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613463919061427d565b61346d90866141a2565b61347791906141d7565b9050600a898154811061348c5761348c613f5b565b6000918252602090912001546001600160401b036101009091048116908216106134fa5780600a8a815481106134c4576134c4613f5b565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613632565b600081600a8b8154811061351057613510613f5b565b600091825260209091200154613534919061010090046001600160401b0316613f87565b90506040518060800160405280826001600160401b031681526020018865ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b85600b8a8154811061364657613646613f5b565b6000918252602090912001805465ffffffffffff191665ffffffffffff9290921691909117905550505050505b50505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156136c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e7919061427d565b600b83815481106136fa576136fa613f5b565b60009182526020909120015461371b90600160f01b900460ff16600a614193565b6009848154811061372e5761372e613f5b565b600091825260209091206004909102016001015461091d9190600160a81b90046001600160401b03166141a2565b6000806127106002548561377091906141a2565b61377a91906141d7565b905060006127106003548661378f91906141a2565b61379991906141d7565b6001600160a01b03851660009081526005602052604090205490915060ff1615613896576001600160a01b038416600090815260046020526040812080548392906137e59084906142b1565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa158015613838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385c9190613faf565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461388b91906142b1565b909155506139459050565b6138a081836142b1565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa1580156138ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139109190613faf565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461393f91906142b1565b90915550505b61214a81836142b1565b82805461395b90613fcc565b90600052602060002090601f01602090048101928261397d57600085556139c3565b82601f1061399657805160ff19168380011785556139c3565b828001600101855582156139c3579182015b828111156139c35782518255916020019190600101906139a8565b506139cf9291506139d3565b5090565b5b808211156139cf57600081556001016139d4565b6001600160a01b03811681146139fd57600080fd5b50565b600060208284031215613a1257600080fd5b8135610a94816139e8565b600060208284031215613a2f57600080fd5b5035919050565b60005b83811015613a51578181015183820152602001613a39565b838111156136735750506000910152565b6020815260008251806020840152613a81816040850160208701613a36565b601f01601f19169190910160400192915050565b80151581146139fd57600080fd5b8035613aae81613a95565b919050565b60008060408385031215613ac657600080fd5b8235613ad1816139e8565b91506020830135613ae181613a95565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613b2457613b24613aec565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613b5257613b52613aec565b604052919050565b8035613aae816139e8565b600082601f830112613b7657600080fd5b604051606081018181106001600160401b0382111715613b9857613b98613aec565b604052806060840185811115613bad57600080fd5b845b81811015613bc7578035835260209283019201613baf565b509195945050505050565b600082601f830112613be357600080fd5b613beb613b02565b806040840185811115613bfd57600080fd5b845b8181101561136f578035613c1281613a95565b845260209384019301613bff565b600082601f830112613c3157600080fd5b613c39613b02565b806040840185811115613c4b57600080fd5b845b8181101561136f578035845260209384019301613c4d565b600082601f830112613c7657600080fd5b613c7e613b02565b806040840185811115613c9057600080fd5b845b8181101561136f57803563ffffffff81168114613caf5760008081fd5b845260209384019301613c92565b6000806000806000806101608789031215613cd757600080fd5b86356001600160401b0380821115613cee57600080fd5b818901915089601f830112613d0257600080fd5b8135602082821115613d1657613d16613aec565b613d28601f8301601f19168201613b2a565b92508183528b81838601011115613d3e57600080fd5b81818501828501376000818385010152829950613d5c818c01613b5a565b985050505050613d6f8860408901613b65565b9350613d7e8860a08901613bd2565b9250613d8d8860e08901613c20565b9150613d9d886101208901613c65565b90509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613de157835183529284019291840191600101613dc5565b50909695505050505050565b60008060408385031215613e0057600080fd5b50508035926020909101359150565b600080600080600060a08688031215613e2757600080fd5b8535945060208601359350604086013592506060860135613e47816139e8565b91506080860135613e57816139e8565b809150509295509295909350565b60008060408385031215613e7857600080fd5b8235613e83816139e8565b946020939093013593505050565b600080600060608486031215613ea657600080fd5b8335613eb1816139e8565b92506020848101356001600160401b0380821115613ece57600080fd5b818701915087601f830112613ee257600080fd5b813581811115613ef457613ef4613aec565b8060051b9150613f05848301613b2a565b818152918301840191848101908a841115613f1f57600080fd5b938501935b83851015613f3d57843582529385019390850190613f24565b809750505050505050613f5260408501613aa3565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383811690831681811015613fa757613fa7613f71565b039392505050565b600060208284031215613fc157600080fd5b8151610a94816139e8565b600181811c90821680613fe057607f821691505b6020821081141561400157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c91508083168061402957607f831692505b85831081141561404757634e487b7160e01b85526022600452602485fd5b8786018381526020018180156140645760018114614075576140a0565b60ff198616825287820196506140a0565b60008b81526020902060005b8681101561409a57815484820152908501908901614081565b83019750505b50949998505050505050505050565b600181815b808511156140ea5781600019048211156140d0576140d0613f71565b808516156140dd57918102915b93841c93908002906140b4565b509250929050565b600082614101575060016108c5565b8161410e575060006108c5565b8160018114614124576002811461412e5761414a565b60019150506108c5565b60ff84111561413f5761413f613f71565b50506001821b6108c5565b5060208310610133831016604e8410600b841016171561416d575081810a6108c5565b61417783836140af565b806000190482111561418b5761418b613f71565b029392505050565b6000610a9460ff8416836140f2565b60008160001904831182151516156141bc576141bc613f71565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826141e6576141e66141c1565b500490565b6000602082840312156141fd57600080fd5b8151610a9481613a95565b60008282101561421a5761421a613f71565b500390565b60006020828403121561423157600080fd5b815160ff81168114610a9457600080fd5b6000610a9483836140f2565b60006001600160401b038083168185168183048111821515161561427457614274613f71565b02949350505050565b60006020828403121561428f57600080fd5b5051919050565b60006000198214156142aa576142aa613f71565b5060010190565b600082198211156142c4576142c4613f71565b500190565b60006001600160401b038083168185168083038211156142eb576142eb613f71565b01949350505050565b600065ffffffffffff83811690831681811015613fa757613fa7613f71565b60006001600160401b038084168061432d5761432d6141c1565b92169190910492915050565b6000825161434b818460208701613a36565b9190910192915050565b600065ffffffffffff8083168185168083038211156142eb576142eb613f7156fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c8063a422061011610125578063c9b67af5116100ad578063e0b117ff1161007c578063e0b117ff146105e1578063e3684e3914610629578063e481b26514610680578063f1b7dc7814610693578063f3191a46146106a657600080fd5b8063c9b67af514610590578063d62fbdd314610598578063d6db4df8146105ab578063d936547e146105be57600080fd5b8063bcb29667116100f4578063bcb29667146104c8578063bf7e214f146104db578063c0680e2014610506578063c0aa0e8a14610519578063c3e0fb1c1461056857600080fd5b8063a4220610146103a0578063abbf4b17146103b3578063b1283e77146103de578063bc3b2b121461043e57600080fd5b806346aed74e116101a85780636a6c575d116101775780636a6c575d146103315780637a9e5e4b146103445780637c770aae146103575780639b19251a146103855780639c7697871461039857600080fd5b806346aed74e146102d857806360230ea8146102eb57806364914439146102fe578063654e51e71461031e57600080fd5b806327507458116101e4578063275074581461027a5780633adec5a71461029d5780633d18b912146102b05780634622ab03146102b857600080fd5b80630700037d146102165780630a9d85eb146102495780630aebeb4e1461025c5780631885f58014610271575b600080fd5b610236610224366004613a00565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b610236610257366004613a1d565b6106af565b61026f61026a366004613a1d565b610707565b005b61023660025481565b61028d610288366004613a1d565b610862565b6040519015158152602001610240565b6102366102ab366004613a1d565b6108cb565b61026f610927565b6102cb6102c6366004613a1d565b6109d3565b6040516102409190613a62565b6102366102e6366004613ab3565b610a7f565b6102366102f9366004613cbd565b610a9b565b61031161030c366004613a00565b6111ec565b6040516102409190613da9565b61026f61032c366004613ded565b61137a565b61023661033f366004613ded565b611431565b61026f610352366004613a00565b611501565b61036a610365366004613e0f565b6115f7565b60408051938452602084019290925290820152606001610240565b61026f610393366004613a00565b611a79565b61026f611b4e565b6102366103ae366004613e65565b611dd4565b6103c66103c1366004613a1d565b61203d565b6040516001600160401b039091168152602001610240565b6103f16103ec366004613a1d565b612153565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610240565b61049061044c366004613a1d565b600c602052600090815260409020546001600160401b0381169065ffffffffffff600160401b8204811691600160701b81049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610240565b6102366104d6366004613a1d565b6121c1565b6001546104ee906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b610236610514366004613e65565b61221d565b61052c610527366004613a1d565b61224e565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610240565b61057b610576366004613e65565b6122a7565b60408051928352901515602083015201610240565b610311612366565b6102366105a6366004613e91565b61244e565b61026f6105b9366004613e65565b612667565b61028d6105cc366004613a00565b60056020526000908152604090205460ff1681565b6105f46105ef366004613e65565b612729565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610240565b61063c610637366004613a1d565b61278c565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610240565b61031161068e366004613a00565b6127ea565b6102366106a1366004613a1d565b612985565b61023660035481565b6000806106bb83612a30565b5050905080600a84815481106106d3576106d3613f5b565b6000918252602090912001546106f7919061010090046001600160401b0316613f87565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613faf565b6001600160a01b0316336001600160a01b0316146000906107bb5760405162461bcd60e51b81526004016107b29190614007565b60405180910390fd5b5042600a82815481106107d0576107d0613f5b565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060006009828154811061081457610814613f5b565b60009182526020909120600490910201556040517f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe5906108579083815260200190565b60405180910390a150565b60006009828154811061087757610877613f5b565b9060005260206000209060040201600001546000141580156108c5575042600a83815481106108a8576108a8613f5b565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600b82815481106108e0576108e0613f5b565b60009182526020909120015461090190600160f01b900460ff16600a614193565b61090a83612985565b610913846106af565b61091d91906141a2565b6108c591906141d7565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906141eb565b5050565b600d81815481106109e357600080fd5b9060005260206000200160009150905080546109fe90613fcc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2a90613fcc565b8015610a775780601f10610a4c57610100808354040283529160200191610a77565b820191906000526020600020905b815481529060010190602001808311610a5a57829003601f168201915b505050505081565b6000610a9483610a8e856127ea565b8461244e565b9392505050565b600d805460018101825560009182528751610add917fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019060208a019061394f565b506020830151600090610af1904290614208565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061421f565b60ff169050600086816020020151610b70578751610ba8565b610b7b82600a614242565b60208901518951610b9490670de0b6b3a76400006141a2565b610b9e91906141d7565b610ba891906141d7565b85519091506000908490610bc29063ffffffff168461424e565b6001600160401b0316610bd591906141d7565b9050620186a0896002602002015111610c3b5760405162461bcd60e51b815260206004820152602260248201527f4465627420627566666572206c657373207468616e20696e697469616c206465604482015261189d60f21b60648201526084016107b2565b6000620186a08a60026020020151610c5c906001600160401b0386166141a2565b610c6691906141d7565b90506000836001600160401b0316600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb919061427d565b60208d0151610cfa91906141a2565b610d0491906141d7565b600980546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610d4a57610d4a613f5b565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b026001600160a81b03199092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600a9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610e7657610e76613f5b565b602002015165ffffffffffff1681526020018b600160028110610e9b57610e9b613f5b565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b0265ffffffffffff60781b19938a16600160481b029390931674ffffffffffffffffffffffff0000000000000000001995909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600b9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600e60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150557f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f63877f00000000000000000000000000000000000000000000000000000000000000008e8e60016003811061119f5761119f613f5b565b60200201516040516111d494939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050505050509695505050505050565b6001600160a01b0381166000908152600e6020908152604080832080548251818502810185019093528083526060949383018282801561124b57602002820191906000526020600020905b815481526020019060010190808311611237575b50505050509050600080600090505b82518110156112aa5761128583828151811061127857611278613f5b565b6020026020010151610862565b15611298578161129481614296565b9250505b806112a281614296565b91505061125a565b506000816001600160401b038111156112c5576112c5613aec565b6040519080825280602002602001820160405280156112ee578160200160208202803683370190505b5090506000805b845181101561136f5761131385828151811061127857611278613f5b565b1561135d5784818151811061132a5761132a613f5b565b602002602001015183838151811061134457611344613f5b565b60209081029190910101528161135981614296565b9250505b8061136781614296565b9150506112f5565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190613faf565b6001600160a01b0316336001600160a01b0316146000906114255760405162461bcd60e51b81526004016107b29190614007565b50600391909155600255565b600080600b838154811061144757611447613f5b565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a082018190529091506114ca90600a614193565b6114d3846108cb565b6114e586670de0b6b3a76400006141a2565b6114ef91906141d7565b6114f991906141d7565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115789190613faf565b6001600160a01b0316336001600160a01b0316146000906115ac5760405162461bcd60e51b81526004016107b29190614007565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6000806000806009898154811061161057611610613f5b565b906000526020600020906004020190506000600a8a8154811061163557611635613f5b565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff600160481b8204811693830193909352600160781b810490921660608201819052600160a81b909204909216608083015290915042106116f65760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107b2565b6116ff8a612b1d565b600061170a8b612d41565b90508881111561175c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107b2565b600b8b8154811061176f5761176f613f5b565b60009182526020909120015461179090600160f01b900460ff16600a614193565b816117a38c670de0b6b3a76400006141a2565b6117ad91906141d7565b6117b791906141d7565b60028401549096506001600160401b03168611156118175760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107b2565b6001830154600090600160a01b900460ff166118335786611835565b8a5b84549091508111156118895760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a20636170616369747920657863656564656400000060448201526064016107b2565b8084600001600082825461189d9190614208565b909155505082516118ba57826040015165ffffffffffff166118d2565b42836040015165ffffffffffff166118d291906142b1565b95508a8460030160008282546118e891906142b1565b9091555050600284018054889190600890611914908490600160401b90046001600160401b03166142c9565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b031661195e91906142c9565b82546001600160401b039182166101009390930a928302919092021990911617905550604080518d8152602081018d905290810188905260608101879052608081018390527f88cb2f3205c1e6922dff1d83796d87350afaa71b7dc3fdac4f1dd228ef15f2419060a00160405180910390a16119dd8988888f8c612db7565b6008546001860154919650611a01916001600160a01b03908116913391168e613057565b600184015460808401516001600160401b03600160a81b909204821691161015611a6157600084556040518c81527f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe59060200160405180910390a1611a6a565b611a6a8c61316a565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190613faf565b6001600160a01b0316336001600160a01b031614600090611b245760405162461bcd60e51b81526004016107b29190614007565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190613faf565b6001600160a01b0316336001600160a01b03161480611c6b5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190613faf565b6001600160a01b0316336001600160a01b0316145b80611cfd5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190613faf565b6001600160a01b0316336001600160a01b0316145b611d3b5760405162461bcd60e51b815260206004820152600f60248201526e13db9b1e48185d5d1a1bdc9a5e9959608a1b60448201526064016107b2565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db29190613faf565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611e4a5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107b2565b6001600160a01b0383166000908152600660205260409020805483908110611e7457611e74613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611ee45760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107b2565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611f1c57611f1c613f5b565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160265ffffffffffff60601b198216811783559554600160901b9081900490941690930265ffffffffffff60901b199095166bffffffffffffffffffffffff60601b19909316929092179390931790556001600160a01b038516815260069091526040902080548390811061201457612014613f5b565b60009182526020822060029091020190815560010180546001600160c01b031916905592915050565b600080600b838154811061205357612053613f5b565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b8204811693850193909352600160601b8104831691840191909152600160901b810482166060840152600160c01b81049091166080830152600160f01b900460ff1660a08201526009805491935090859081106120dc576120dc613f5b565b906000526020600020906004020160010160159054906101000a90046001600160401b03166001600160401b031690506000826020015165ffffffffffff16426121269190614208565b604084015190915065ffffffffffff1661214082846141a2565b61214a91906141d7565b95945050505050565b6009818154811061216357600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b60006121cc8261203d565b600983815481106121df576121df613f5b565b906000526020600020906004020160010160159054906101000a90046001600160401b031661220e9190613f87565b6001600160401b031692915050565b600e602052816000526040600020818154811061223957600080fd5b90600052602060002001600091509150505481565b600a818154811061225e57600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff600160481b8204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600660205260408120805482918291859081106122d5576122d5613f5b565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b9092049093166080830152919450915015801561235c575042816040015165ffffffffffff1611155b9150509250929050565b60606000805b6009548110156123a45761237f81610862565b15612392578161238e81614296565b9250505b8061239c81614296565b91505061236c565b506000816001600160401b038111156123bf576123bf613aec565b6040519080825280602002602001820160405280156123e8578160200160208202803683370190505b5090506000805b6009548110156124455761240281610862565b15612433578083838151811061241a5761241a613f5b565b60209081029190910101528161242f81614296565b9250505b8061243d81614296565b9150506123ef565b50909392505050565b600042815b845181101561252a576000806124828888858151811061247557612475613f5b565b60200260200101516122a7565b915091508015612515576001600160a01b038816600090815260066020526040902087518591908990869081106124bb576124bb613f5b565b6020026020010151815481106124d3576124d3613f5b565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561251291906142b1565b94505b5050808061252290614296565b915050612453565b5082156125ca5760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c491906141eb565b5061265f565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af1158015612639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265d919061427d565b505b509392505050565b33600090815260066020526040902080548290811061268857612688613f5b565b600091825260209091206001600290920201015465ffffffffffff166126f05760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107b2565b3360009081526007602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061274557600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600b818154811061279c57600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b60606000805b6001600160a01b038416600090815260066020526040902054811015612881576001600160a01b038416600090815260066020526040902080548290811061283a5761283a613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1661286f578161286b81614296565b9250505b8061287981614296565b9150506127f0565b506000816001600160401b0381111561289c5761289c613aec565b6040519080825280602002602001820160405280156128c5578160200160208202803683370190505b5090506000805b6001600160a01b03861660009081526006602052604090205481101561297b576001600160a01b038616600090815260066020526040902080548290811061291657612916613f5b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16612969578083838151811061295057612950613f5b565b60209081029190910101528161296581614296565b9250505b8061297381614296565b9150506128cc565b5090949350505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f3919061427d565b600b8381548110612a0657612a06613f5b565b600091825260209091200154612a2790600160f01b900460ff16600a614193565b610913846121c1565b6000818152600c60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff90811694830194909452600160701b810490931691810191909152600160a01b90910460ff1615156060820181905282918291612aad57600080600093509350935050612b16565b6020810151612abc90426142f4565b9250806040015165ffffffffffff168365ffffffffffff1610915081612ae3578051612b12565b806040015165ffffffffffff168365ffffffffffff168260000151612b08919061424e565b612b129190614313565b9350505b9193909250565b42612b278261203d565b60098381548110612b3a57612b3a613f5b565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612b6c9190613f87565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600b8381548110612ba457612ba4613f5b565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600c909152604090205460ff600160a01b90910416156109cf576000828152600c60205260408120908080612c1386612a30565b92509250925082600a8781548110612c2d57612c2d613f5b565b60009182526020909120018054600190612c5690849061010090046001600160401b0316613f87565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612d2d57835483908590600090612c9d9084906001600160401b0316613f87565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612ce691906142f4565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612d39565b835460ff60a01b191684555b505050505050565b6000600b8281548110612d5657612d56613f5b565b600091825260209091200154612d7790600160f01b900460ff16600a614193565b612d8083613679565b600a8481548110612d9357612d93613f5b565b60009182526020909120015461091d919061010090046001600160401b03166141a2565b6001600160a01b03858116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015612e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e62919061427d565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b02969096166bffffffffffffffffffffffff60601b19978516600160301b026bffffffffffffffffffffffff199093169390941692909217179490941617919091179055612f30868461375c565b6008549091506001600160a01b03166340c10f1930612f4f848a6142b1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612f9557600080fd5b505af1158015612fa9573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af1158015613028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304c919061427d565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916130bb9190614339565b6000604051808303816000865af19150503d80600081146130f8576040519150601f19603f3d011682016040523d82523d6000602084013e6130fd565b606091505b509150915081801561312757508051158061312757508080602001905181019061312791906141eb565b612d395760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016107b2565b60006009828154811061317f5761317f613f5b565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600b8054919350908490811061321c5761321c613f5b565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a083015290925042916132a19190614355565b65ffffffffffff168165ffffffffffff161061367357600081600a86815481106132cd576132cd613f5b565b6000918252602090912001546132f29190600160781b900465ffffffffffff166142f4565b65ffffffffffff169050600061330786612d41565b90506000856040015161331b578551613355565b60a085015161332b90600a614193565b8651839061334190670de0b6b3a76400006141a2565b61334b91906141d7565b61335591906141d7565b905082856060015165ffffffffffff168261337091906141a2565b61337a91906141d7565b6009888154811061338d5761338d613f5b565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff16836133dd91906141a2565b6133e791906141d7565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561343f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613463919061427d565b61346d90866141a2565b61347791906141d7565b9050600a898154811061348c5761348c613f5b565b6000918252602090912001546001600160401b036101009091048116908216106134fa5780600a8a815481106134c4576134c4613f5b565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613632565b600081600a8b8154811061351057613510613f5b565b600091825260209091200154613534919061010090046001600160401b0316613f87565b90506040518060800160405280826001600160401b031681526020018865ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b85600b8a8154811061364657613646613f5b565b6000918252602090912001805465ffffffffffff191665ffffffffffff9290921691909117905550505050505b50505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156136c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e7919061427d565b600b83815481106136fa576136fa613f5b565b60009182526020909120015461371b90600160f01b900460ff16600a614193565b6009848154811061372e5761372e613f5b565b600091825260209091206004909102016001015461091d9190600160a81b90046001600160401b03166141a2565b6000806127106002548561377091906141a2565b61377a91906141d7565b905060006127106003548661378f91906141a2565b61379991906141d7565b6001600160a01b03851660009081526005602052604090205490915060ff1615613896576001600160a01b038416600090815260046020526040812080548392906137e59084906142b1565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa158015613838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385c9190613faf565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461388b91906142b1565b909155506139459050565b6138a081836142b1565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa1580156138ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139109190613faf565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461393f91906142b1565b90915550505b61214a81836142b1565b82805461395b90613fcc565b90600052602060002090601f01602090048101928261397d57600085556139c3565b82601f1061399657805160ff19168380011785556139c3565b828001600101855582156139c3579182015b828111156139c35782518255916020019190600101906139a8565b506139cf9291506139d3565b5090565b5b808211156139cf57600081556001016139d4565b6001600160a01b03811681146139fd57600080fd5b50565b600060208284031215613a1257600080fd5b8135610a94816139e8565b600060208284031215613a2f57600080fd5b5035919050565b60005b83811015613a51578181015183820152602001613a39565b838111156136735750506000910152565b6020815260008251806020840152613a81816040850160208701613a36565b601f01601f19169190910160400192915050565b80151581146139fd57600080fd5b8035613aae81613a95565b919050565b60008060408385031215613ac657600080fd5b8235613ad1816139e8565b91506020830135613ae181613a95565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613b2457613b24613aec565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613b5257613b52613aec565b604052919050565b8035613aae816139e8565b600082601f830112613b7657600080fd5b604051606081018181106001600160401b0382111715613b9857613b98613aec565b604052806060840185811115613bad57600080fd5b845b81811015613bc7578035835260209283019201613baf565b509195945050505050565b600082601f830112613be357600080fd5b613beb613b02565b806040840185811115613bfd57600080fd5b845b8181101561136f578035613c1281613a95565b845260209384019301613bff565b600082601f830112613c3157600080fd5b613c39613b02565b806040840185811115613c4b57600080fd5b845b8181101561136f578035845260209384019301613c4d565b600082601f830112613c7657600080fd5b613c7e613b02565b806040840185811115613c9057600080fd5b845b8181101561136f57803563ffffffff81168114613caf5760008081fd5b845260209384019301613c92565b6000806000806000806101608789031215613cd757600080fd5b86356001600160401b0380821115613cee57600080fd5b818901915089601f830112613d0257600080fd5b8135602082821115613d1657613d16613aec565b613d28601f8301601f19168201613b2a565b92508183528b81838601011115613d3e57600080fd5b81818501828501376000818385010152829950613d5c818c01613b5a565b985050505050613d6f8860408901613b65565b9350613d7e8860a08901613bd2565b9250613d8d8860e08901613c20565b9150613d9d886101208901613c65565b90509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613de157835183529284019291840191600101613dc5565b50909695505050505050565b60008060408385031215613e0057600080fd5b50508035926020909101359150565b600080600080600060a08688031215613e2757600080fd5b8535945060208601359350604086013592506060860135613e47816139e8565b91506080860135613e57816139e8565b809150509295509295909350565b60008060408385031215613e7857600080fd5b8235613e83816139e8565b946020939093013593505050565b600080600060608486031215613ea657600080fd5b8335613eb1816139e8565b92506020848101356001600160401b0380821115613ece57600080fd5b818701915087601f830112613ee257600080fd5b813581811115613ef457613ef4613aec565b8060051b9150613f05848301613b2a565b818152918301840191848101908a841115613f1f57600080fd5b938501935b83851015613f3d57843582529385019390850190613f24565b809750505050505050613f5260408501613aa3565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383811690831681811015613fa757613fa7613f71565b039392505050565b600060208284031215613fc157600080fd5b8151610a94816139e8565b600181811c90821680613fe057607f821691505b6020821081141561400157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c91508083168061402957607f831692505b85831081141561404757634e487b7160e01b85526022600452602485fd5b8786018381526020018180156140645760018114614075576140a0565b60ff198616825287820196506140a0565b60008b81526020902060005b8681101561409a57815484820152908501908901614081565b83019750505b50949998505050505050505050565b600181815b808511156140ea5781600019048211156140d0576140d0613f71565b808516156140dd57918102915b93841c93908002906140b4565b509250929050565b600082614101575060016108c5565b8161410e575060006108c5565b8160018114614124576002811461412e5761414a565b60019150506108c5565b60ff84111561413f5761413f613f71565b50506001821b6108c5565b5060208310610133831016604e8410600b841016171561416d575081810a6108c5565b61417783836140af565b806000190482111561418b5761418b613f71565b029392505050565b6000610a9460ff8416836140f2565b60008160001904831182151516156141bc576141bc613f71565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826141e6576141e66141c1565b500490565b6000602082840312156141fd57600080fd5b8151610a9481613a95565b60008282101561421a5761421a613f71565b500390565b60006020828403121561423157600080fd5b815160ff81168114610a9457600080fd5b6000610a9483836140f2565b60006001600160401b038083168185168183048111821515161561427457614274613f71565b02949350505050565b60006020828403121561428f57600080fd5b5051919050565b60006000198214156142aa576142aa613f71565b5060010190565b600082198211156142c4576142c4613f71565b500190565b60006001600160401b038083168185168083038211156142eb576142eb613f71565b01949350505050565b600065ffffffffffff83811690831681811015613fa757613fa7613f71565b60006001600160401b038084168061432d5761432d6141c1565b92169190910492915050565b6000825161434b818460208701613a36565b9190910192915050565b600065ffffffffffff8083168185168083038211156142eb576142eb613f7156fea164736f6c634300080a000a",
  "devdoc": {
    "author": "Zeus, Indigo Review by: JeffX",
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(string,address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval, tune interval]",
          "_market": "[capacity (in OHM or quote), initial price (9 decimals), debt buffer (3 decimals)]",
          "_name": "off-chain generated name for market. format ex: \"DAI\" or \"OHM-DAI\"",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in OHM decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in OHM decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of gOHM due"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in OHM decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of OHM to be paid in OHM decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gOHM"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_sendgOHM": "send payout as gOHM or sOHM",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in gOHM"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_sendgOHM": "send payout as gOHM or sOHM",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gOHM"
        }
      }
    },
    "title": "Olympus Bond Depository V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(string,address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7458,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7461,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)3967"
      },
      {
        "astId": 6780,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6782,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6786,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6790,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6954,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "notes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Note)3806_storage)dyn_storage)"
      },
      {
        "astId": 6960,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 6969,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasury)4156"
      },
      {
        "astId": 44,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Market)3447_storage)dyn_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "terms",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Terms)3458_storage)dyn_storage"
      },
      {
        "astId": 52,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "metadata",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Metadata)3471_storage)dyn_storage"
      },
      {
        "astId": 57,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "adjustments",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)3480_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "names",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)3447_storage)dyn_storage": {
        "base": "t_struct(Market)3447_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)3471_storage)dyn_storage": {
        "base": "t_struct(Metadata)3471_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)3806_storage)dyn_storage": {
        "base": "t_struct(Note)3806_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)3458_storage)dyn_storage": {
        "base": "t_struct(Terms)3458_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3736": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOlympusAuthority)3967": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)4156": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)3806_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)3806_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)3480_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)3480_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)3480_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 3473,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3475,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3477,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3479,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)3447_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 3433,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3436,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3736"
          },
          {
            "astId": 3438,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3440,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3442,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3444,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 3446,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)3471_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 3460,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3462,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3464,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3466,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3468,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3470,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)3806_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 3797,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3799,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3801,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3803,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3805,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)3458_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 3449,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3451,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3453,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3455,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3457,
            "contract": "contracts/BondDepository.sol:OlympusBondDepositoryV2",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}